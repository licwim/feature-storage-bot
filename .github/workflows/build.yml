name: Build
run-name: Build ${{ github.event.pull_request.title || github.ref_name }} (${{ github.sha }})

on:
  push:
    branches:
      - master
      - 'release/**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - master
      - 'release/**'
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref_name == 'master'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Bump version and push tag
        id: tag-version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.PAT }}
          custom_release_rules: hotfix:patch,feature:minor
          default_bump: false
          release_branches: master
      - name: Create Release
        if: steps.tag-version.outputs.new_tag
        uses: ncipollo/release-action@v1.16.0
        with:
          tag: ${{ steps.tag-version.outputs.new_tag }}
          generateReleaseNotes: true
          draft: true

  build:
    runs-on: self-hosted
    env:
      DOCKER_HUB_USERNAME: licwim
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
    outputs:
      image_name: ${{ steps.build-image.outputs.IMAGE_NAME }}
      build_version: ${{ steps.build-image.outputs.BUILD_VERSION }}
    steps:
    - uses: actions/checkout@v2
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ env.DOCKER_HUB_TOKEN }}
    - name: Build and push image
      id: build-image
      run: |
        TAG=$(if [ ${{ github.event_name }} = 'pull_request' ]; then echo "${{ github.head_ref }}"; else echo "${{ github.ref_name }}"; fi | sed 's|/|-|g')
        IMAGE_NAME="${{ github.repository }}:$TAG"
        BUILD_VERSION="$TAG-${{ github.sha }}"
        echo "BUILD_VERSION = $BUILD_VERSION"
        docker build . --file Dockerfile --label sha=${{ github.sha }} --label build=$BUILD_VERSION --tag "$IMAGE_NAME"
        echo "IMAGE_NAME = $IMAGE_NAME"
        docker push "$IMAGE_NAME"
        echo "::set-output name=IMAGE_NAME::$IMAGE_NAME"
        echo "::set-output name=BUILD_VERSION::$BUILD_VERSION"
